QEMU中basic block以及tcg中各种变量的基本逻辑
---------------------------------------------

-v0.1 2022.8.27 Sherlock init

简介：在实现一个CPU架构的QEMU前端指令翻译的时候会用到各种tcg变量，本文整理这些
      变量的基本语意，分析背后的qemu代码。本文分析基于的QEMU版本是6.2.0, 基于riscv 
      CPU体系结构。


指令前端翻译
------------

 QEMU的前端翻译使用中间码实现guest指令的逻辑，中间码其实已经是一组完备的类RISC
 汇编指令定义。我们做前端翻译，可以理解为使用中间码作为汇编语言实现guest指令的逻辑。
 QEMU代码qemu/tcg/README有怎么使用中间码的完整描述，值得仔细学习下。

 中间码的定义里有各种指令，还有不同作用域的“寄存器”的定义。我们关注的是各种“寄存器”，
 也就是tcg变量的定义。

 QEMU翻译基于TB，一个TB里又可能有多个basic block，我们叫BB，tcg变量的作用域和BB
 有关系。tcg有三种类型的变量：temporary, local temporary和global，global这个不用
 多说，一般系统寄存器是global变量，temporary变量的生命只在一个BB内，local temporary
 变量的生命在一个TB内，可以跨越BB。

 BB从上一个BB的结尾或者一个set_label指令开始, BB以分支指令(brcond_xxx)、goto_tb
 以及exit_tb结束，

 举一个arm里的例子：target/arm/translate.c
```
 static bool trans_LE
 	[...]
        TCGv_i32 decr = tcg_temp_local_new_i32();                               
        TCGv_i32 ltpsize = load_cpu_field(v7m.ltpsize);                         
        tcg_gen_sub_i32(decr, tcg_constant_i32(4), ltpsize);                    
        tcg_gen_shl_i32(decr, tcg_constant_i32(1), decr);                       
        tcg_temp_free_i32(ltpsize);                                             
                                                                                
        tcg_gen_brcond_i32(TCG_COND_LEU, cpu_R[14], decr, loopend);             
                                                                                
        tcg_gen_sub_i32(cpu_R[14], cpu_R[14], decr);                            
        tcg_temp_free_i32(decr);                                                
	[...]
```
 这里的decr就要是一个local temporary，因为这个变量在brcon_i32的前后都要使用，已经
 跨越了两个BB。

QEMU代码分析
------------


