some note about the book "got git" (3)

 -chapter 12
 git cherry-pick id 把id对应的commit向当前的HEAD提交
 A-->B-->C-->D-->E git checkout id(C) git cherry-pich id(E)会把E向C提交:
                  /-- master
 A-->B-->C-->D-->E 
          \
           E <--HEAD
 这时HEAD分离的情况，HEAD不对应任何分支,可以建立新的branch, 也可以git reset可以
 把master的内容指向E, 这时D和其后的E将显示不出来

 git cherry-pick id -e 可以修改commit的签名中的内容(邮箱)

 git rebase

 -chapter 15
 git pull/push
 git push 有时无法成功，可能是因为git push对应的git仓库不是bare的，直接推送会
 改变工作区。这可以配置对应的远程仓库：git config receive.denyCurrentBranch ignore
 这时可以成功push

 -chapter 16

 -other
 git commit --amend --author='your name <email-box>' 可以修改commit中author一行的内容

 patch的subject这一行有时不只是[PATCH], 比如在询问意见时可以是[PATCH RFC ***], 在第3版
 patch时subject可以是[PATCH v3 ***]. 如何改变subject这一行的内容：可以在生成patch
 的时候加--subject-prefix="***", 比如, git format-patch -s -2 --subject-prefix="PATCH RFC"
 生成的patch subject为：[PATCH RFC 0/3], [PATCH RFC 1/3], [PATCH RFC 2/3], [PATCH RFC 3/3]

 git send-email 使用git send-email发送patches, 组成的patches是一个系列的。
 用git format-patch生成patches, 然后一个个用普通邮箱发出，给出的patches是一个个分裂的。
 git send-email *.patch 即可把当前目录里的patch都发送出去，而且git send-email提供一个
 对话是的发送过程，只要在过程中填入发送的邮箱即可。对于cc的邮箱可以在一开始的命令中给出：
 git send-email *.patch --cc=your_email_box@126.com

 Message-ID to be used as In-Reply-To?


