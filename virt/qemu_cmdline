qemu操作命令总结
=================

-v0.1 2024.9.27 Sherlock init
-v0.2 2024.9.30 Sherlock add cpu
-v0.3 2024.10.6 Sherlock ...
-v0.4 2024.10.8 Sherlock ...
-v0.5 2024.10.9 Sherlock vNMI/调试/固件/cache/vSVA/SVE/PMU

简介：收集qemu各种配置命令。这里一般不区分kvm和tcg，在需要区分的时候，再作说明。
      如果qemu命令和平台相关，则使用ARM64平台。

固件相关
---------

 - DTS

 - ACPI

 - BIOS

CPU
----

 - 基本
```
  -smp cpus=8,maxcpus=32,sockets=2,clusters=4,cores=2,threads=2
```
  表示系统最大支持32个逻辑core，启动其中8个，系统中有2个socket，一个socket里有4
  个cluster，一个cluster里有2个物理核，一个物理核有2个逻辑核。

  可见，maxcpus = sockets * clusters * cores * threads。

  如上启动的8个core，会依次分配到第一个socket里的前两个cluster。按照如下冷插的方
  式可以指定启动core的具体位置。

 - 冷插

 - 热插拔

  如上的配置中，maxcpus大于系统启动的core数，插值就是支持热插的core的个数，可以
  通过qemu monitor的命令进行CPU热插拔。
```
(qemu) device_add cortex-a57-arm-cpu,id=core2,core-id=2
...
(qemu) device_del core2
```
  如上是tcg模式的CPU热插拔，KVM时把CPU类型改成: host-arm-cpu

  如果qemu启动的时候指定了socket/cluster/core/thread等参数，可以使用如下的方式热
  插CPU，如果对应的位置已经有CPU存在，会报错提示。
```
(qemu) device_add cortex-a57-arm-cpu,id=core_x,socket-id=x,cluster-id=y,core-id=z,thread-id=n
```

 - NUMA
```
  -numa node,memdev=mem0,nodeid=0,cpus=0-15 \
  -numa node,memdev=mem1,nodeid=1,cpus=16-31 \
```

 - cache

 - 单点特性

   - SVE/SVE2

   - PMU

内存
-----

 - 基本

  简单配置虚拟机的内存是4096MB。
```
  -m 4096M
```
  
  如下配置是各种内存插拔的基础，如下具体的配置是最大支持内存是4G，启动自带的内存
  是1024MB，还有三个内存插槽可以插内存。
```
  -m 1024M,slots=3,maxmem=4G
```

 - 冷插

  qemu代码里对内存的各种插拔有文档描述，相关文档在qemu/docs/memory-hotplug.txt。
  如下是一个实例的内存冷插的配置，这个配置具有一定的代表性，object表示一个内存后端
  对象，device表示一个内存前端设备，前端设备通过memdev和后端对象关联在一起。
```
qemu [...] -m 6GB,slots=4,maxmem=10G \
  -object memory-backend-file,id=mem1,size=1G,mem-path=/mnt/hugepages-1G \
  -device pc-dimm,id=dimm1,memdev=mem1 \
  -object memory-backend-file,id=mem2,size=256M,mem-path=/mnt/hugepages-2MB \
  -device pc-dimm,id=dimm2,memdev=mem2                                         
```
  如上大页的使用需要作提前的配置，具体方法在Linux内核代码文档里描述，具体路径在：
  Linux/Documentation/admin-guide/mm/hugetlbpage.rst。
  
 - 热插拔

  在qemu monitor里运行命令进行热插。
```
(qemu) object_add memory-backend-ram,id=mem1,size=1G
(qemu) device_add pc-dimm,id=dimm1,memdev=mem1
```
  对应的热拔命令，device和object的参数是对应的id：
```
(qemu) device_del dimm1
(qemu) object_del mem1
```

 - NUMA
```
  -m 4096M \
  -object memory-backend-ram,id=mem0,size=2048M \
  -object memory-backend-ram,id=mem1,size=2048M \
  -numa node,memdev=mem0,nodeid=0,cpus=0-15 \
  -numa node,memdev=mem1,nodeid=1,cpus=16-31 \
```
  todo: 和host绑定

 - nvdimm
```
```

 - pc-dimm
```
```
 
中断
-----

 - GICv3
```
```

 - GICv4
```
```

 - 伪vNMI/硬件vNMI

IOMMU
------

 - iommufd

```
-object iommufd,id=iommufd0
-device vfio-pci,host=0000:02:00.0,iommufd=iommufd0
```

 - vsmmu

  qemu支持完全用软件模拟的SMMU，可以使用如下命令行使能。
```
qemu-system-aarch64 -machine virt,xxx,iommu=smmuv3
```

 - vSVA

PCIe
-----

 - PCIe root port

 - PCIe switch

 - VFIO直通

 - 热插拔

网络
-----

 - virtio-net
```
```

存储
-----

 - virtio-blk
```
-device pcie-root-port,port=0x8,chassis=0,id=pci.0,bus=pcie.0,multifunction=on,addr=0x3 \
-device pcie-root-port,port=0x9,chassis=1,id=pci.1,bus=pcie.0,addr=0x3.0x1 \
-device virtio-blk-pci,drive=drive0,id=virtblk0,num-queues=8,packed=on,bus=pci.1 \
-drive file=./boot.img,if=none,id=drive0,format=raw
```
  需要先用dd命令创建如上boot.img文件。

 - virtio-scsi

 - 安装

虚拟机热迁移
-------------

 - 基本热迁移

  热迁移是qemu的基本特性，迁入端迁出端qemu的配置要完全一致。其中迁入端qemu需要增
  加如下命令，表示迁入端的IP和port。(这里是在同一台机器上做迁移，所以IP的地方是0)
```
-incoming tcp:0:6666
```
  迁入端启动后会停下来等待即将到来的迁出端。

  迁出端启动后进入qemu monitor输入迁移命令。
```
migrate -d tcp:0:6666
```

 - 带VFIO设备热迁移
```
-object iommufd,id=iommufd0
-device vfio-pci,host=0000:02:00.0,iommufd=iommufd0,enable-migration=on
```

 - 热迁移和热插拔联合
```
```

虚拟机和物理机通信
-------------------

 - 9P文件系统
```
-device virtio-9p-pci,fsdev=p9fs,mount_tag=p9,bus=pcie.0 \
-fsdev local,id=p9fs,path=/home/sherlock/p9root,security_model=mapped
```

 - 网络

qemu/kvm调试选项
-----------------

 - qemu启动/停止

 - qemu monitor

 - telnet/串口/ssh

 - qemu trace

 - kvm trace

 - qemu tcg调试
