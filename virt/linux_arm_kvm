Linux内核ARM64 KVM虚拟化的基本逻辑

-v0.1 2024.7.29  Sherlock init
-v0.2 2024.8.18  Sherlock ...
-v0.3 2024.10.26 Sherlock ...

简介：本文梳理Linux内核中ARM64虚拟化的基本逻辑，本文只梳理基于KVM的虚拟化。梳理
      基于的Linux内核版本是v6.10-rc4，基于的QEMU版本是v9.0.50。


## 基本逻辑

Linux内核KVM的分析可以参考[这里](https://wangzhou.github.io/riscv-KVM虚拟化分析/)，不过这个分析是基于RISCV的。Linux的KVM基本框架可以
参考基于RISCV的这个文档，我们这里着重分析ARM KVM的实现。

ARM64 KVM的初始化入口。
```
kvm_arm_init
      /* 注意，这里初始化的是各个子系统的类，而不是实例。从下面的实例会看的更清楚 */
  +-> init_subsystems
        /* arch/arm64/kvm/vgic/vgic-init.c */
    +-> kvm_vgic_hyp_init
      +-> vgic_v3_probe
        +-> kvm_register_vgic_device
	  +-> kvm_register_device_ops(&kvm_arm_vgic_v3_ops, KVM_DEV_TYPE_ARM_VGIC_V3)
	  +-> kvm_vgic_register_its_device

        /* 注册各个timer的中断处理函数 */
    +-> kvm_timer_hyp_init
          /*
	   * 拿到drivers/clocksource/arm_arch_timer.c里定义的arch_timer_kvm_info，
	   * 读取count的方法在timecounter，也在KVM里得到，注意这里读的是CNTVCT。
	   */
      +-> info = arch_timer_get_kvm_info()
          timecounter = &info->timecounter

      /* 创建/dev/kvm文件，后续的VM/vCPU等资源都从这个文件的ioctl创建出来 */
  +-> kvm_init
    +-> ioctl: KVM_CREATE_VM/KVM_CHECK_EXTENSION...
```

实例的初始化接口是各个ioctl接口。

## 创建VM

open如上的/dev/kvm得到一个fd，对fd做ioctl KVM_CREATE_VM，返回一个匿名fd表示被创
建的vm:
```
/* virt/kvm/kvm_main.c */
kvm_dev_ioctl_create_vm
  +-> kvm_create_vm
        /* 具体构架相关 */
    +-> kvm_arch_init_vm
      +-> kvm_vgic_early_init
      +-> kvm_timer_init_vm
    ... todo ...
```

对这个vm fd的各种ioctl用来创建VM的各个部件：
```
/* virt/kvm/kvm_main.c */
kvm_vm_ioctl
  +-> KVM_CREATE_VCPU
  +-> KVM_SET_USER_MEMORY_REGION
  +-> KVM_GET_DIRTY_LOG
  +-> KVM_CLEAR_DIRTY_LOG
  ...
  +-> KVM_IRQFD
  +-> KVM_SET_GSI_ROUTING

      /* 创建kvm上的各个设备, gic/its, gicr? gicd? */
  +-> KVM_CREATE_DEVICE

  +-> KVM_CREATE_GUEST_MEMFD
  ...
```

基本数据结构：

整个虚拟机的数据结构：
```
kvm
  +-> kvm_arch arch                    // arm64 kvm结构
    +-> arch_timer_vm_data timer_data  //
      +-> voffset
      +-> ppi[]

    +-> vgic_dist vgic
    +-> id_regs[]
    +-> ctr_el0
```

虚拟机上vCPU的数据结构：
```
kvm_vcpu 
  +-> kvm_vcpu_arch arch               // arm64 vcpu结构，具体vCPU实例
    +-> arch_timer_cpu timer_cpu       // arm64 vcpu timer结构
      +-> arch_timer_context timers[]  // 一个vcpu上多种类型timer
        +-> arch_timer_offset offset
          +-> vm_offset指针
        +-> hrtimer
      +-> vgic_cpu
      +-> kvm_pmu
      ...
```

使用vm ioctl KVM_CREATE_VCPU 创建vCPU的流程：
```
kvm_vm_ioctl的KVM_CREATE_VCPU
  +-> kvm_vm_ioctl_create_vcpu
    +-> kvm_arch_vcpu_create
          /* */
      +-> kvm_timer_vcpu_init
            /* 把如上vm_offset指针指向内容更新为当前CNTVCT的值 */
        +-> timer_set_offset(vcpu_vtimer(vcpu), kvm_phys_timer_read())
            /* todo: ... */
        +-> hrtimer_init

      +-> kvm_vgic_vcpu_init(vcpu)
```

使用vCPU的对应的fd, 通过ioctl操作vCPU, 操作有KVM_RUN/KVM_GET_REGS/KVM_SET_REGS...
其中default会走到架构自定义的vCPU ioclt里，ARM64会在其中做vcpu_init。
```
/* virt/kvm/kvm_main.c */
kvm_vcpu_ioctl
      /* 拉起vCPU的入口，下面拉出来独立分析 */
  +-> KVM_RUN
  +-> default
    +-> kvm_arch_vcpu_ioctl

      KVM_ARM_VCPU_INIT:
        +-> kvm_arch_vcpu_ioctl_vcpu_init
          +-> kvm_vcpu_set_target
                /* 在这里面初始化各种系统寄存器 */
            +-> kvm_reset_vcpu
	          /*
		   * 其中调用每个系统寄存器的reset回调，把返回值保存到
		   * kvm->arch->id_regs[]。
		   */
	      +-> kvm_reset_sys_regs
                  /* todo: ... */
              +-> kvm_timer_vcpu_reset
      KVM_SET_ONE_REG
      KVM_GET_ONE_REG
      ...
      KVM_SET_DEVICE_ATTR
      KVM_GET_DEVICE_ATTR
      ...
```

## CPU虚拟化

拉起vCPU的入口
```
/* arch/arm64/kvm/arm.c */
kvm_arch_vcpu_ioctl_run
  /*
   * 控制vCPU运行的核心逻辑，注意这里如果vCPU退到KVM里可以处理，KVM处理完后会马
   * 上再次进入vCPU执行。
   */
  while (ret > 0) {
        /* 拉起vCPU的核心逻辑 */
    +-> kvm_arm_vcpu_enter_exit
    ...
        /* VM退出到KVM的入口，arch/arm64/kvm/handle_exit.c */
    +-> handle_exit
          /* trap到KVM的逻辑入口 */
      +-> handle_trap_exceptions
            /*
             * 根据trap时报的EC类型选择不同的处理函数，整个处理函数的列表定义在:
             * arm_exit_handlers数组。
             */
        +-> kvm_get_exit_handler
        +-> exit_handler
  }
```

对于系统寄存器触发的trap在kvm_handle_sys_reg中处理。
```
/* arch/arm64/kvm/sys_regs.c */
kvm_handle_sys_reg
 +-> ...
```

Stage2的缺页trap在kvm_handle_guest_debug中处理。这个里面既处理内存的缺页，也处理
MMIO的缺页，ARM64 VM里的ITS/GICD/GICR就是通过访问对应的MMIO寄存器时，触发trap到
KVM里模拟实现的。
```
/* arch/arm64/kvm/mmu.c */
kvm_handle_guest_abort
     /* MMIO模拟的入口, arch/arm64/kvm/mmio.c */
 +-> io_mem_abort
       /* virt/kvm/kvm_main.c */
   +-> kvm_io_bus_write/read
     +-> __kvm_io_bus_write
       +-> kvm_iodevice_write
```

其中相关的KVM层面的数据结构有：kvm_io_device/kvm_io_bus/kvm_io_range等。kvm_io_device
描述一个kvm(内核虚拟机)里的IO设备，kvm_io_bus是kvm_io_device的bus，kvm_io_bus被
划分位多个range，每个range都有对应的kvm_io_range。

具体到ARM64 ITS的虚拟化逻辑，每层数据结构以面向对象的方式组织起来。
```
   kvm_io_device 
     - kvm_io_device_ops *op = kvm_io_gic_ops
         ^
         |

   vgic_io_device
     - vgic_io_device *regions = its_registers

         ^
         |

      vgic_its
```
基于如上的数据结构，vgic_register_its_iodev(struct kvm, struct vgic_its, addr)把
VM的ITS向KVM注册。

更高一层的注册逻辑。

## 内存虚拟化

todo: 如上stage2 fault的逻辑。


## 中断虚拟化

todo：host上中断的基本逻辑。

todo: 中断虚拟化的基本逻辑。

### PPI虚拟化

### SGI虚拟化

### LPI虚拟化

## SMMU虚拟化

todo：vSVA的基本逻辑。




