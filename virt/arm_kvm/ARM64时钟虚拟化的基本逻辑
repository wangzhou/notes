-v0.1 Sherlock 2024.8.17 init
-v0.2 Sherlock 2024.8.18 ...
-v0.3 Sherlock 2024.9.01 ...

简介：文本整理Linux下基于KVM的ARM64时钟虚拟化的基本逻辑。


硬件逻辑
---------

ARM spec的D11章节定义了generic timer，其定义主要分两个概念：system counter和timer。
system counter是以一定频率增加的计数器，频率和计数器的数值分别记录在对应的寄存器
里。在每个core上有timer相关的寄存器，分别有：1. CompareValue寄存器，当counter的
值和CompareValue的值相等时触发timer中断(PPI)；2. 相关timer中断的控制寄存器；3.
TimerValue寄存器，这个寄存器的值从大到小递减，减到0时触发timer中断。

下面以EL1 physical counter-timer寄存器为例，罗列出相关的寄存器。
```
CNTFRQ_EL0，counter-timer frequency register。
CNTPCT_EL0，counter-timer physical counter register。

CNTP_CTL_EL0，counter-timer physical timer control register。
CNTP_TVAL_EL0，counter-timer physical timer TimerValue register。
CNTP_CVAL_EL0，counter-timer physical timer CompareValue register。
```
ARM spec里还定义了其它特权级的对应counter和timer寄存器，这些异常级别timer还有：
EL1 virtual timer，非安全EL2 physical timer, 非安全EL2 virtual timer，EL3以及安全
态下的各种timer。

对于virtual timer，它的触发逻辑有一些不同，ARM引入了一个CNTVOFFSET_EL2寄存器，
物理counter减去这个值是CNTVCT_EL0的值，即CNTVCT_EL0 = CNTPCT_EL0 - CNTVOFFSET_EL2。
在这样的硬件设计下，物理count是一直在走的，对于一个特定的vCPU想要得到它在线的count
数，只要用物理count减去vCPU下线时间对应的count数就好。

virtual timer对应的中断被触发的逻辑是vitual timer的CompareValue寄存器和CNTVCT_EL0
做比较。

各个timer分别有自己的中断号，不考虑EL3和安全的话，常用的就是如下这几个：
```
+------------------------------+-----------+
| EL1 physical timer           |       30  |
+------------------------------+-----------+
| EL1 virtual timer            |       27  |
+------------------------------+-----------+
| 非安全EL2 physical timer     |       26  |
+------------------------------+-----------+
| 非安全EL2 virtual timer      |       28  |
+------------------------------+-----------+
```

时钟虚拟化的逻辑
-----------------

为了使得虚拟机里感知到实际的物理时间流逝，实际上并不是像上面说的，使用CNTVOFFSET_EL2
统计vCPU下线的总时间，这样计算出来的CNTVCT_EL0是虚拟机实际在位的总counter。

实际的行为是，在虚拟机启动时读出CNTPCT_EL0的值，把这个值写入CNTVOFFSET_EL2，后续
虚拟机就一直使用这个值。这样的实现使得虚拟机在启动的时候CNTVCT_EL0是0，并且随后
CNTVCT_EL0的值就是虚拟机看到的实际经过的counter数。

这样，即使虚拟机不在线时，虚拟机对应的counter也在增加。比如，如果虚拟机里的Linux
系统的HZ=250，也就是语意为4ms会产生一个时钟中断，对应的物理行为可能是，vCPU在下线
时，其对应的CNTVCT_EL0和其对应的CNTV_CVAL_EL0已经满足中断出发的条件，在vCPU上线后，
马上会触发vCPU的timer中断。所以，从宏观上看，在虚拟化下，基于timer的资源管理行为
和host上的次数是一样的，只是vCPU执行"有用功"的实际时间少了。

QEMU/KVM代码分析
-----------------






