-v0.1 2023.7.17 Sherlock init

简介：本文对超标量处理器里load/store指令的实现做一个梳理，其中的信息来自各个地方，
      再加上作者自己的逻辑分析。所以，本文只是自己对load/store指令实现的一个总结。


load/store指令被取入处理器内部后，进过各级流水线的处理，最终会到达LSU部件(load store unit)，
之前的各级流水只是对load/store指令做一些通用的处理，比如，decode，rename等。

load/store指令到达LSU后，理论上看如果没有地址上的依赖，计算出访问地址以及数据寄存器
ready后应该立即投入执行。展开看看load/store存在的地址上的依赖，地址依赖和指令间的
寄存器依赖比较类似，不同的是RAW/WAR/WAW都是真依赖，比如，WAR对相同地址先读后写，
后面的store先执行逻辑一定错了。

所以这里的问题就是，严格按照地址依赖关系把load/store投入执行，处理器性能就会低，
load/store在没有计算出访问地址之前投机执行，就需要冲突检测逻辑以及出现冲突时flush
流水线。现在的CPU一般会按顺序执行store，提前投机执行load，因为load是把数据取入CPU，
处于依赖链条的前端，load取到数据后，后续依赖它的指令就可以继续投机执行。

我们依照顺序执行store、提前投机执行load的基本逻辑，看看应该如何处理如上的各种冲突。
首先因为store是顺序执行的，就不会有WAW的冲突了。

针对WAR违例的处理。如下x1/x3的寄存器里的值相同，处理器先投机执行了store，因为处理
器里的指令要顺序提交，所以指令B写出的值需要先保存在处理器内部buffer里，一般load指
令在取入数据时会先搜索如上的处理器内部buffer，但是这里因为store指令比load新，所以
load不能用处理器内部buffer(store buffer)里的值，load需要从cache里取数据进来。
```
    A:	load x0, (x1)	
	...
    B:	store x2, (x3)

  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+  old
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  
  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
         ^              ^           ^        ^  \-------------/
      allocate          B           A      commit  retired
```
这么看，处理器只要对LSU里的load/store做编号，load取数据的时候不用store buffer里
比它年轻(标号比load大的store)的store指令的输出就好。

针对RAW违例的处理。如下x1/x3的寄存器里的值相同，B处的load指令先投机执行了，B后依赖
B的指令也可以投机执行，当A处的store指令执行时，需要检查是否有访问相同地址的更年轻
的load指令已经执行，如果有，那么就检测到了RAW违例。发生RAW违例时，load指令以及比
它年轻的指令的运算都可能使用错误的数据，所以都要被flush掉。
```
    A:	store x2, (x3)
	...
    B:	load x0, (x1)	
    C:  add x4, x0, x5

  flush  <--------------+
  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+  old
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  
  +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
         ^           ^  ^           ^        ^  \-------------/
      allocate       C  B           A      commit  retired
```
allocate到B的指令可以立即做flush也可以等到B提交的时候再做flush，其中的不同在于，
flush指令不只是释放ROB的资源，被flush指令在CPU里各个部件上占用的资源都要释放，立即
做flush可以及时释放错误占用的硬件资源，但是需要增加而外的检测电路，从CPU的各个部件
里把flush指令挑出来，等到B提交时，比B老的指令都已经退休，流水线里都是需要被flush
掉的指令，flush逻辑实现会比较简单。

从上面的分析得到，我们想象的LSU里至少需要有：load queue、store queue、store buffer，
其中load queue是一个无序的容器，store queue和store buffer是FIFO。


LSU和MMU的关系。

LSU和cache的关系。

多核系统下的LSU。
