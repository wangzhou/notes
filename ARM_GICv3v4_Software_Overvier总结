-v0.1 2024.5.7  Sherlock init
-v0.2 2024.5.8  Sherlock ...
-v0.3 2024.5.9  Sherlock ...
-v0.4 2024.5.10 Sherlock ...
-v0.5 2024.5.11 Sherlock ...

简介：本文是ARM的文档《GICv3 and GICv4 Software Overview》的一个学习笔记，GICv3/
      GICv4的基本逻辑会持续的总结到这个文档里。这个文档貌似是基于2016的GIC协议，
      我们参考的GICv3/GICv3的协议是H.b版本。


GIC的需求
----------

外部各种各样的原因都可以中断CPU核的执行，也就是给CPU发中断，中断控制器汇集各种
外设的中断，通过CPU的中断接口报给CPU，CPU在收到中断后查特定的中断相关的寄存器，
获得对应的中断ID，再通过ID查找到对应的中断处理函数，执行中断处理函数后完成整个中
断处理流程。

我们先分析中断控制器(GIC)的基本需求，然后一一看下，GIC实现各个需求的基本逻辑。

1. GIC要管理每个中断和中断ID(INTID)的对应关系。CPU通过GIC的寄存器得到当前中断的
   INTID，那么GIC硬件本身就要维护GIC输入到INTID的映射关系。

2. 中断处理过程中，一个中断会处在不同的状态上。GIC要维护每个中断的状态。

3. 中断可以被控制报到特性的CPU核上，GIC要维护每个中断到CPU核的路由关系。

4. 各种不同的中断可能会同时报到一个CPU核，CPU处理它们有先后顺序，GIC要维护各个中
   断的优先级。

5. 中断个数持续扩展，GIC要有一定的可扩展性。 

6. 对于支持虚拟化的CPU核，GIC要配合支持，并尽量降低开销。

INTID和中断种类
----------------

GIC把中断分成了不同的种类：PPI，SGI，SPI和LPI。PPI(private peripheral interrupt)
一般用来接CPU核的Timer中断，INTID在16-31，注意是每个core上都有处于16-31编号的PPI，
一个core上多个特权态都有自己的PPI INTID，SBSA定义了固定的PPI INTID。SGI(software
generate interrupt)，用来做IPI中断，软件写对应的GIC寄存器，触发另一个core上的SGI
中断，INTID在0-15。SPI(shared peripheral interrupt)一般外设使用的中断类型, INTID
在32-1019。LPI(locat peripheral interrupt)，支持PCIe设备上的消息中断(MSI)，INTID
在8192或者更大。

GIC中断控制器从v1发展到v4，v2已经支持PPI/SGI/SPI，使用GIC CPU interface(GICC)和
GIC distributor(GICD)支持，对于每个中断，GICD上都有专门的MMIO寄存器描述(或配置)
它的中断触发方式/中断状态/中断路由/中断优先级等信息，GICv3/GICv4继承了这样的设计，
并在这个基础上增加了ITS和GIC redistributor(GICR)支持更多数量的MSI中断，所以GICv3/
GICv4对于SPI也有大量的配置寄存器。

MSI数量巨大，配置信息保存在内存中的表格里，下配置的方式也改用命令进行，也就有comand
queue之类的设计。

中断触发方式和中断状态
-----------------------

中断的触发方式有电平触发和边沿触发，这里触发方式是指外设中断和GIC的输入之间的信
号。中断状态有：inactive, pending, active & pending, active，中断在不同的触发方
式下具有不同的状态机。

对于电平中断，外设中断电平拉起(inactive -> pending)，CPU通过ICC_IARn_EL1读INTID
(pending -> active & pending)，CPU写外设寄存器拉低外设的中断电平(active & pending -> active)，
CPU通过ICC_CTRL_EL1配置EOI(active -> inactive)。注意，这里用高电平代表有中断，只
是为了方便描述，实际也可能是反过来。

对于边沿中断，外设发起边沿中断(inactive -> pending)，CPU通过ICC_IARn_EL1读INTID
(pending -> active)，如果这个时候，外设又有边沿触发的中断(active -> active & pending)，
CPU通过ICC_CTRL_EL1配置EOI(active & pending -> pending)。对于处于active的中断，
如果CPU通过ICC_CTRL_EL1配置EOI(active -> inactive)。

总结下各个状态的语意，inactive是没有中断，pending是外设有中断信号，但是CPU还没有
处理，active是CPU读了INDID，并在处理中断，active & pending在电平和边沿触发中断下
的语意不一样，电平中断下，表示CPU还没有控制外设拉低外设和GIC之间的电平，边沿触发
中断，表示CPU在处理当前中断的时候，外设又来了一个中断。

LPI只有inactive和pending，为什么只有两种？和ICC_IARn_EL1/ICC_CTRL_EL1如何配合?

GIC的各个模块
--------------

GIC上包括的各个部件主要有GICC/GICR/GICD/ITS等，它们之间的逻辑关系如下图：
```   
                                           Memory:

        +----------+   +-------+           +------------+ +---+ +----------------+
        |   GICD   |   |  ITS  | --------> |device table| |ITT| |collection table|
        +----------+   +-------+ <-------- +------------+ +---+ -----------------+

+-------+  +-------+  +-------+  +-------+ +-----------------------+ +-----------------+
| GICR  |  | GICR  |  | GICR  |  | GICR  | |LPI configuration table| |LPI pending table|
+-------+  +-------+  +-------+  +-------+ +-----------------------+ +-----------------+
                                            (every GICR has own LPI pending table, 
+-------+  +-------+  +-------+  +-------+   but share LPI configuration table)
| GICC  |  | GICC  |  | GICC  |  | GICC  | 
|       |  |       |  |       |  |       | 
| core0 |  | core1 |  | core2 |  | core3 | 
+-------+  +-------+  +-------+  +-------+ 
```
如上，SPI的路由信息保存在硬件里，而LPI的路由信息保存在各种内存里的表格中。我们考
虑软件需要的配置接口：1. 中断的路由信息需要配置到GIC里；2. 各个中断的状态需要有
读取和配置的接口，各个中断需要有enable开关；3. 有些中断需要有软件接口触发，比如，
SGI和向虚拟机里注入中断。

每种类型的中断，我们都看看上面这些对应的接口是什么。中断路由下面单独抽出来看。
看下各种中断的enable和中断状态，PPI/SGI的中断enable/状态接口通过GICR上的寄存器配
置？SPI的这些控制通过GICD上的大量寄存器搞定，LPI的这些状态保存在LPI相关的两个表格
里，其中全局的LPI configuration table保存所有LPI的优先级和enable情况，LPI pending
table保存每个中断的inactive/pending状态，如何配置这些状态？

LPI需要PCIe设备写GITS_TRANSLATER寄存器触发，虚拟机中断需要hypervisor写ICH_LRn_EL2
触发虚拟机里的对应中断。

对于ITS表格里的信息，软件需要通过向command queue下发comand的方式更新，表格的具体
格式是硬件实现相关的。LPI相关的表格需要怎么配置？

用内存中的表哥保存信息，一般都会在设备上放cache，GIC也是一样。有了设备的cache，
就会有同步的需求，GIC使用command无效化ITS中cache的配置信息。

外设和GIC的接口
----------------

PPI主要是做Timer的中断，Timer的中断信号和PPI的输入相连。SGI做IPI，CPU写ICC_SGI0R_EL1/
ICC_SGI1R_EL1/ICC_ASGI1R_EL1触发SGI。外设的线中断可以直接接在GIC上做SPI中断。外
设通过写GITS_TRANSLATER这个MMIO寄存器触发LPI，PCIe设备的MSI靠LPI来实现，MSI写的
内容包括PCIe设备的BDF + eventID，GIC拿到这个信息后会根据提前配置好的信息查找对应
的INTID以及路由信息，并根据提前配置的路由信息，把中断信号送到对应的CPU。

中断路由控制
-------------

PPI/SGI不存在中断路由？SPI直接通过GICD的寄存器配置。LPI用发command的方式配置。

中断优先级
-----------

todo: ...

中断虚拟化
-----------

todo: kvm里模拟gic的基本逻辑? 也就是虚拟机中外设和中断控制器的关系。

      list register的情况，支持软件模拟外设，通过kvm ioctl从hypervisor向VM注入中断？
      这种情况可以向VM注入PPI/SPI/LPI？SGI要怎么搞？

      vPPI的逻辑是怎么样，也是hypervisor里起hrtimer，然后定时注入？

      直通外设和list register的逻辑怎么综合到一起？

vPPI/vSGI/vSPI/vLPI?

外设的虚拟化：软件模拟，设备直通

      vSPI不能直接注入? 只有vSGI和vLPI可以直接注入？

      软件模拟的设备，直通的设备都可以直接注入？

      GITS_TRANSLATER地址是host和VM公用的？


中断虚拟化直通
---------------

ICC_IAR0_EL1/ICC_IAR1_EL1, CPU从这个寄存器读到INTID。
ICC_CTRL_ELn, control completion of interrupt，CPU通过这个寄存器设置EOI。

ICC_SRE_ELn, system register enable。
ICC_PMR_ELn, priority mask register。
ICC_IGRPEN1_ELn，interrupt group enable。
