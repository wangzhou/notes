-v0.1 2023.11.21 Sherlock init
-v0.2 2024.01.08 Sherlock 

简介：本文总结Linux内核里内存回收的基本逻辑。


基本逻辑
---------

Linux系统上的虚拟内存管理和物理内存管理的逻辑是相对正交的，我们这里提到的内存回收
指的物理内存管理的逻辑。

从一个具体的例子做下理解，用户态调用一个munmap断开VA->PA映射和这个PA对应的物理页面
释放回伙伴系统的逻辑是正交的。

实际上，虚拟地址是对用户态承若的语意，内核只承诺了最基本的虚拟地址保存数据的功能，
当访存指令在用户态访问虚拟地址上的数据时，内核保证用户态可以访问到正确的数据，其中
可能直接访问到数据，也可能访问的物理页面不在内存，内核负责把数据给到用户态，一般
的逻辑是在异常处理中加载物理页面，并把PC返回到出问题的访存指令，重新执行访存指令。
从用户态的角度看，异常发生时访存指令停在了那里，随后继续执行完成访问虚拟地址的行为，
用户态并不感知内核中物理页面管理的行为。

整理内存回收的可能触发点。首先，断开VA->PA映射，比如munmap中，并不会直接释放物理
页面，这个过程只会改动物理页面相关的反向映射以及LRU数据。在分配物理页面时，如果
直接分配不到物理内存，就会先回收物理内存，再试图分配。有相关的内核线程(kswapd等)，
定期的做物理内存的回收。

LRU链表维护使用中的物理页面。

决定回收哪个物理页面的逻辑。

通用物理页面的回收逻辑。

根据页面具体回收方式，不同的处理。1. 不需要保存直接回收(缓存/没有用的内存/OOM)；2.需要保存
(保存回backend文件/匿名页swap到swap分区/shrink)

代码分析
---------
